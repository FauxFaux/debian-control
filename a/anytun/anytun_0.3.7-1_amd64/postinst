#!/bin/sh
# postinst script for anytun

set -e

if [ -x "/etc/init.d/anytun" ]; then
  update-rc.d anytun defaults >/dev/null
fi

if [ "$1" = "configure" ]; then
  adduser --quiet --system --group --no-create-home --home /var/run/anytun anytun
fi

# Automatically added by dh_installsystemd/11.3.5
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# In case this system is running systemd, we need to ensure that all
	# necessary tmpfiles (if any) are created before starting.
	if [ -d /run/systemd/system ] ; then
		systemd-tmpfiles --create anytun.conf >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/11.3.5
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'anytun.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'anytun.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'anytun.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'anytun.service' >/dev/null || true
	fi
fi
# End automatically added section

