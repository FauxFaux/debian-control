#!/bin/sh
# postinst script for apertium
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
    # make sure that the apertium user exists. Simplest portable way to check
    # is to chown something, so we'll create the directories that we need here.

    makedir() {
        if [ ! -d $1 ]; then
            mkdir $1
        fi
        chown $2 $1 && chmod $3 $1
    }

    cd /var/log
    makedir apertium root:root 700
    chgrp apertium apertium 2>/dev/null || addgroup --system apertium
    chown apertium apertium 2>/dev/null || adduser --system --home /var/lib/apertium --no-create-home \
                                           --disabled-password --ingroup apertium apertium
    # Now that we have the user ready, chown & chmod the log dir
    makedir apertium apertium:apertium 700
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.


# Automatically added by dh_python3:
if which py3compile >/dev/null 2>&1; then
	py3compile -p apertium-apy 
fi
if which pypy3compile >/dev/null 2>&1; then
	pypy3compile -p apertium-apy  || true
fi

# End automatically added section
# Automatically added by dh_installinit/11.5.1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -x "/etc/init.d/apertium-apy" ]; then
		update-rc.d apertium-apy defaults >/dev/null
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		invoke-rc.d apertium-apy $_dh_action || exit 1
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/11.5.1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'apertium-apy.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'apertium-apy.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'apertium-apy.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'apertium-apy.service' >/dev/null || true
	fi
fi
# End automatically added section


exit 0
