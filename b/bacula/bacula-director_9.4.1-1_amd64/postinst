#!/bin/sh

set -e

PKG_NAME="bacula-director"
TEMPLATES="/usr/share/bacula-common/defconfig"
DSTDIR="/etc/bacula"
CONFIG="bacula-dir.conf"
TARGET="$DSTDIR/$CONFIG"
CONFTEMPLATE="/usr/share/bacula-common/defconfig/$CONFIG"

case "$1" in
    configure)
	. /usr/share/bacula-common/common-functions.dpkg
	readOrCreatePasswords

	## handle /etc/default/bacula-dir

	# take over ownership of /etc/default/bacula-dir
	# (also if previous version is empty)
	if dpkg --compare-versions "$2" lt "7.4.3+dfsg-5"; then
	    ucfr -f $PKG_NAME /etc/default/bacula-dir
        fi
	setup_etc_default $PKG_NAME $@

	## handle /etc/bacula/bacula-dir.conf
	# create new bacula-dir.conf using the template
	TMP_CONFIG="$(mktemp -p /tmp $PKG_NAME.conf.ucftmp-XXXXXXXXXX)"
	chmod 640 $TMP_CONFIG
	chown root:bacula $TMP_CONFIG

	sed -e s~XXX_DIRPASSWORD_XXX~$DIRPASSWD~ \
	    -e s~XXX_MONDIRPASSWORD_XXX~$DIRMPASSWD~ \
	    -e s~XXX_SDPASSWORD_XXX~$SDPASSWD~ \
	    -e s~XXX_FDPASSWORD_XXX~$FDPASSWD~ \
	    -e "s~@debian_basename@~`hostname`~" \
	    $CONFTEMPLATE > $TMP_CONFIG

        . /usr/share/bacula-common/dbc_database.conf
        if [ "$dbc_install" = "true" ] ; then
	    case "$dbc_dbtype" in
		mysql | pgsql)
		    if [ -z "$dbc_dbport" ]; then
			sed -e "s/dbname = \"XXX_DBNAME_XXX\";/dbname = \"$dbc_dbname\"; DB Address = \"$dbc_dbserver\";/" -i $TMP_CONFIG
		    else
			sed -e "s/dbname = \"XXX_DBNAME_XXX\";/dbname = \"$dbc_dbname\"; DB Address = \"$dbc_dbserver\"; DB Port= \"$dbc_dbport\";/" -i $TMP_CONFIG
		    fi
		    sed	-e "s~/XXX_DBNAME_XXX~/$dbc_dbname~" \
			-e "s/XXX_DBUSER_XXX/$dbc_dbuser/" -e "s/XXX_DBPASSWORD_XXX/$dbc_dbpass/" \
			-i $TMP_CONFIG
		;;
		sqlite3)
		    BACULADBNAME=`echo "$dbc_dbname" | sed 's/.db$//'`
		    sed -e "s~/XXX_DBNAME_XXX~/$BACULADBNAME~" \
			-e "s~\"XXX_DBNAME_XXX~\"$BACULADBNAME~" \
			-e s~XXX_DBUSER_XXX~~ \
			-e s~XXX_DBPASSWORD_XXX~~ \
			-i  $TMP_CONFIG
		;;
	    esac
        fi
	# let ucf handle the conffile and register it
	ucf --debconf-ok --three-way $TMP_CONFIG $TARGET
	ucfr $PKG_NAME $TARGET
	rm -f $TMP_CONFIG

	## handle /etc/bacula/scripts/delete_catalog_backup

	if [ -r /usr/share/bacula-common/dbc_database.conf ] ; then
	    . /usr/share/bacula-common/dbc_database.conf
	fi
	# take over ownership of delete_catalog_backup
	# (also if previous version is empty)
	if dpkg --compare-versions "$2" lt "7.4.3+dfsg-4"; then
	    ucfr -f $PKG_NAME $DSTDIR/scripts/delete_catalog_backup
        fi

	# execute only if dbconfig is in use
        if [ "$dbc_install" = "true" ] ; then
	    # the configure step essentially just replaces XXX_DBNAME_XXX
	    # with the real database name in
	    # /etc/bacula/scripts/delete_catalog_backup
	    . /usr/share/bacula-common/common-functions.dpkg

	    case "$dbc_dbtype" in
		mysql | pgsql)
		    DBNAME="$dbc_dbname"
		    ;;
		sqlite3)
		    DBNAME=`echo "$dbc_dbname" | sed 's/.db$//'`
		    ;;
	    esac
	    install_config \
		$PKG_NAME \
		$TEMPLATES/scripts/delete_catalog_backup \
		$DSTDIR/scripts/delete_catalog_backup
	    chmod 755 $DSTDIR/scripts/delete_catalog_backup
	fi

	## handle /etc/bacula/scripts/make_catalog_backup

	# take over ownership of make_catalog_backup
	# (also if previous version is empty)
	if dpkg --compare-versions "$2" lt "7.4.3+dfsg-7"; then
	    ucfr -f $PKG_NAME $DSTDIR/scripts/make_catalog_backup
        fi

	tempfile=`tempfile -p "conf-"`
	install -m 0755 -o root -g root $TEMPLATES/scripts/make_catalog_backup $tempfile
	# let ucf know about previous md5sums of make_catalog_backup
	cp $TEMPLATES/scripts/make_catalog_backup.md5sum $tempfile.md5sum

	DBLONGNAME=$(cat /usr/share/bacula-common/dbtype | sed 's/pgsql/postgresql/')
	sed "s/XX_DBLONGNAME_XX/$DBLONGNAME/" -i $tempfile

        if [ "$dbc_install" = "true" -a "x" != "x$dbc_dbuser" ] ; then
	    sed "s/XXX_DBUSER_XXX/$dbc_dbuser/" -i $tempfile
	fi

	ucf --debconf-ok --three-way $tempfile $DSTDIR/scripts/make_catalog_backup
	ucfr $PKG_NAME $DSTDIR/scripts/make_catalog_backup
	rm -f $tempfile $tempfile.md5sum
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

# Automatically added by dh_installinit/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -x "/etc/init.d/bacula-director" ]; then
		update-rc.d bacula-director defaults >/dev/null
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		invoke-rc.d bacula-director $_dh_action || exit 1
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'bacula-director.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'bacula-director.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'bacula-director.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'bacula-director.service' >/dev/null || true
	fi
fi
# End automatically added section


exit 0
