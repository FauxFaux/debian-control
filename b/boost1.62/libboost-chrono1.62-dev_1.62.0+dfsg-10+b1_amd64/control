Package: libboost-chrono1.62-dev
Source: boost1.62 (1.62.0+dfsg-10)
Version: 1.62.0+dfsg-10+b1
Architecture: amd64
Maintainer: Debian Boost Team <team+boost@tracker.debian.org>
Installed-Size: 73
Depends: libboost1.62-dev (= 1.62.0+dfsg-10+b1), libboost-chrono1.62.0 (= 1.62.0+dfsg-10+b1)
Conflicts: libboost-chrono1.48-dev, libboost-chrono1.49-dev, libboost-chrono1.50-dev, libboost-chrono1.52-dev, libboost-chrono1.53-dev, libboost-chrono1.54-dev, libboost-chrono1.55-dev, libboost-chrono1.57-dev, libboost-chrono1.58-dev, libboost-chrono1.60-dev, libboost-chrono1.61-dev
Section: libdevel
Priority: optional
Multi-Arch: same
Homepage: http://www.boost.org/libs/chrono/
Description: C++ representation of time duration, time point, and clocks
 This package forms part of the Boost C++ Libraries collection.
 .
 The Boost.Chrono library provides:
 .
  * A means to represent time durations: managed by the generic
 duration class . Examples of time durations include days, minutes,
 seconds and nanoseconds, which can be represented with a fixed number
 of clock ticks per unit. All of these units of time duration are
 united with a generic interface by the duration facility.
  * A type for representing points in time: time_point. A time_point
 represents an epoch plus or minus a duration. The library leaves
 epochs unspecified. A time_point is associated with a clock.
  * Several clocks, some of which may not be available on a
 particular platform: system_clock, steady_clock and
 high_resolution_clock. A clock is a pairing of a time_point and
 duration, and a function which returns a time_point representing now.
 .
 To make the timing facilities more generally useful, Boost.Chrono
 provides a number of clocks that are thin wrappers around the
 operating system's time APIs, thereby allowing the extraction of wall
 clock time, user CPU time, system CPU time spent by the process:
 .
  * process_real_cpu_clock, captures wall clock CPU time spent by the
 current process.
  * process_user_cpu_clock, captures user-CPU time
 spent by the current process.
  * process_system_cpu_clock, captures
 system-CPU time spent by the current process.
  * A tuple-like class
 process_cpu_clock, that captures real, user-CPU, and system-CPU
 process times together.
  * A thread_clock thread steady clock giving
 the time spent by the current thread (when supported by a platform).
 .
 Lastly, Boost.Chrono includes typeof registration for duration and
 time_point to permit using emulated auto with C++03 compilers.
