#!/bin/sh
# vim: set noet ts=8:
# postinst script for ceph-common
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#
# 	postinst configure <most-recently-configured-version>
# 	old-postinst abort-upgrade <new-version>
# 	conflictor's-postinst abort-remove in-favour <package> <new-version>
# 	postinst abort-remove
# 	deconfigured's-postinst abort-deconfigure in-favour <failed-install-package> <version> [<removing conflicting-package> <version>]
#

# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


# Let the admin override these distro-specified defaults.  This is NOT
# recommended!
[ -f "/etc/default/ceph" ] && . /etc/default/ceph

[ -z "$SERVER_HOME" ] && SERVER_HOME=/var/lib/ceph
[ -z "$SERVER_USER" ] && SERVER_USER=ceph
[ -z "$SERVER_NAME" ] && SERVER_NAME="Ceph storage service"
[ -z "$SERVER_GROUP" ] && SERVER_GROUP=ceph
[ -z "$SERVER_UID" ] && SERVER_UID=64045  # alloc by Debian base-passwd maintainer
[ -z "$SERVER_GID" ] && SERVER_GID=$SERVER_UID


# Groups that the user will be added to, if undefined, then none.
[ -z "$SERVER_ADDGROUP" ] && SERVER_ADDGROUP=

case "$1" in
    configure)
       # create user to avoid running server as root
       # 1. create group if not existing
       if ! getent group | grep -q "^$SERVER_GROUP:" ; then
          addgroup --quiet --system --gid $SERVER_GID \
	      $SERVER_GROUP 2>/dev/null ||true
       fi
       # 2. create user if not existing
       if ! getent passwd | grep -q "^$SERVER_USER:"; then
         adduser --quiet \
                 --system \
                 --no-create-home \
                 --disabled-password \
	         --uid $SERVER_UID \
	         --gid $SERVER_GID \
                 $SERVER_USER 2>/dev/null || true
       fi
       # 3. adjust passwd entry
       usermod -c "$SERVER_NAME" \
               -d $SERVER_HOME   \
               -g $SERVER_GROUP  \
               $SERVER_USER 2>/dev/null

       # 5. adjust file and directory permissions
       if ! dpkg-statoverride --list $SERVER_HOME >/dev/null
       then
           chown $SERVER_USER:$SERVER_GROUP $SERVER_HOME
           chmod u=rwx,g=rx,o= $SERVER_HOME
       fi
       if ! dpkg-statoverride --list /var/log/ceph >/dev/null
       then
           chown -R $SERVER_USER:$SERVER_GROUP /var/log/ceph
	   # members of group ceph can log here, but cannot remove
	   # others' files.  non-members cannot read any logs.
           chmod u=rwx,g=rwxs,o=t /var/log/ceph
       fi

       # 6. fix /var/run/ceph
       if [ -d /var/run/ceph ]; then
	   chown $SERVER_USER:$SERVER_GROUP /var/run/ceph
       fi

       # create /run/ceph.  fail softly if systemd isn't present or
       # something.
       which systemd-tmpfiles > /dev/null && systemd-tmpfiles --create || true
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
	:
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.


# Automatically added by dh_python2:
if which pycompile >/dev/null 2>&1; then
	pycompile -p ceph-common 
fi

# End automatically added section

# Automatically added by dh_python3:
if which py3compile >/dev/null 2>&1; then
	py3compile -p ceph-common 
fi
if which pypy3compile >/dev/null 2>&1; then
	pypy3compile -p ceph-common  || true
fi

# End automatically added section
# Automatically added by dh_systemd_enable/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'ceph.target' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'ceph.target'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'ceph.target' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'ceph.target' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_systemd_enable/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'rbdmap.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'rbdmap.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'rbdmap.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'rbdmap.service' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_systemd_start/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -d /run/systemd/system ]; then
		systemctl --system daemon-reload >/dev/null || true
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		deb-systemd-invoke $_dh_action 'ceph.target' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installdeb/12
dpkg-maintscript-helper rm_conffile /etc/bash_completion.d/rados 10.2.5-1\~ -- "$@"
dpkg-maintscript-helper rm_conffile /etc/bash_completion.d/rbd 10.2.5-1\~ -- "$@"
# End automatically added section
# Automatically added by dh_installinit/12
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -x "/etc/init.d/rbdmap" ]; then
		update-rc.d rbdmap defaults >/dev/null || exit 1
	fi
fi
# End automatically added section


exit 0
