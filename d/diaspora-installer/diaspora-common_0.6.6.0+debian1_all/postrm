#! /bin/sh
# postrm.skeleton
# Skeleton maintainer script showing all the possible cases.
# Written by Charles Briscoe-Smith, March-June 1998.  Public Domain.

# Abort if any command returns an error value
set -e

# This script is called twice during the removal of the package; once
# after the removal of the package's files from the system, and as
# the final step in the removal of this package, after the package's
# conffiles have been removed.

# Ensure the menu system is updated

case "$1" in
  remove)
    # This package is being removed, but its configuration has not yet
    # been purged.
    :
    # stop the service if running
    if service diaspora status >/dev/null; then
      service diaspora stop
    fi

    rm -rf /var/lib/diaspora-common/diaspora.conf
    rm -rf /var/lib/diaspora-common/database.yml
    rm -rf /var/lib/diaspora-common/nginx-site-diaspora

    # Remove diversion
    # ldconfig is NOT needed during removal of a library, only during
    # installation

    ;;
  purge)
    # This package has previously been removed and is now having
    # its configuration purged from the system.
    :

    # purge debconf questions
    if [ -e /usr/share/debconf/confmodule ]; then
      # Source debconf library.
      . /usr/share/debconf/confmodule

      # Do you want to remove all data?
      db_input high diaspora-common/purge_data|| true
      db_go
 
      # Check if we should remove data?
      db_get diaspora-common/purge_data
      if [ "${RET}" = "true" ]; then
        rm -f /etc/dbconfig-common/diaspora-common.conf
        if which ucf >/dev/null 2>&1; then
	    ucf --purge /etc/dbconfig-common/diaspora-common.conf
	    ucfr --purge diaspora-common /etc/dbconfig-common/diaspora-common.conf
	fi
        diaspora_user_home=/var/lib/diaspora
        if [ -d ${diaspora_user_home} ]; then
          for i in  public app-assets Gemfile.lock .bundle vendor; do
            if [ -e ${diaspora_user_home}/$i ]; then
              rm -rf ${diaspora_user_home}/$i
            fi
          done
        fi
        diaspora_home=/usr/share/diaspora
        if [ -d ${diaspora_home} ]; then
          for i in db bin app/assets; do
            if [ -e ${diaspora_home}/$i ]; then
              rm -rf ${diaspora_home}/$i
            fi
          done
        fi
        echo "Removing user: diaspora"
        if id -u diaspora;  then
          userdel -r diaspora
        fi
      fi

      # Remove my changes to the db.
      db_purge
    fi

    # we mimic dpkg as closely as possible, so we remove configuration
    # files with dpkg backup extensions too:
    ### Some of the following is from Tore Anderson:
    for ext in '~' '%' .bak .ucf-new .ucf-old .ucf-dist;  do
	rm -f /etc/diaspora.conf$ext
	rm -f /etc/diaspora/database.yml$ext
	rm -f /etc/nginx/sites-available/diaspora$ext
    done
 
    # remove the configuration file itself
    rm -f /etc/diaspora.conf
    rm -f /etc/diaspora/database.yml
    rm -f /etc/nginx/sites-available/diaspora
    rm -f /etc/nginx/sites-enabled/diaspora
    rm -rf /etc/diaspora/ssl

    # and finally clear it out from the ucf database
    if which ucf >/dev/null; then
        ucf --purge /etc/diaspora.conf
        ucf --purge /etc/diaspora/database.yml
        ucf --purge /etc/nginx/sites-available/diaspora
    fi    
    if which ucfr >/dev/null; then
        ucfr --purge diaspora-common /etc/diaspora.conf
        ucfr --purge diaspora-common /etc/diaspora/database.yml
        ucfr --purge diaspora-common /etc/nginx/sites-available/diaspora
    fi    

    # remove all configuration files
    rm -rf /etc/diaspora/*
    ;;
  disappear)
    if test "$2" != overwriter; then
      echo "$0: undocumented call to \`postrm $*'" 1>&2
      exit 0
    fi
    # This package has been completely overwritten by package $3
    # (version $4).  All our files are already gone from the system.
    # This is a special case: neither "prerm remove" nor "postrm remove"
    # have been called, because dpkg didn't know that this package would
    # disappear until this stage.
    :

    ;;
  upgrade)
    # About to upgrade FROM THIS VERSION to version $2 of this package.
    # "prerm upgrade" has been called for this version, and "preinst
    # upgrade" has been called for the new version.  Last chance to
    # clean up.
    :

    ;;
  failed-upgrade)
    # About to upgrade from version $2 of this package TO THIS VERSION.
    # "prerm upgrade" has been called for the old version, and "preinst
    # upgrade" has been called for this version.  This is only used if
    # the previous version's "postrm upgrade" couldn't handle it and
    # returned non-zero. (Fix old postrm bugs here.)
    :

    ;;
  abort-install)
    # Back out of an attempt to install this package.  Undo the effects of
    # "preinst install...".  There are two sub-cases.
    :

    if test "${2+set}" = set; then
      # When the install was attempted, version $2's configuration
      # files were still on the system.  Undo the effects of "preinst
      # install $2".
      :

    else
      # We were being installed from scratch.  Undo the effects of
      # "preinst install".
      :

    fi ;;
  abort-upgrade)
    # Back out of an attempt to upgrade this package from version $2
    # TO THIS VERSION.  Undo the effects of "preinst upgrade $2".
    :

    ;;
  *) echo "$0: didn't understand being called with \`$1'" 1>&2
     exit 0;;
esac

# Automatically added by dh_installinit
if [ "$1" = "purge" ] ; then
	update-rc.d diaspora remove >/dev/null
fi


# In case this system is running systemd, we make systemd reload the unit files
# to pick up changes.
if [ -d /run/systemd/system ] ; then
	systemctl --system daemon-reload >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_installdebconf
if [ "$1" = purge ] && [ -e /usr/share/debconf/confmodule ]; then
	. /usr/share/debconf/confmodule
	db_purge
fi
# End automatically added section

exit 0
