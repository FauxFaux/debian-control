Package: libeclipse-ltk-ui-refactoring-java
Source: eclipse-jdt-ui (4.10-1)
Version: 3.9.200+eclipse4.10-1
Architecture: all
Maintainer: Debian Java Maintainers <pkg-java-maintainers@lists.alioth.debian.org>
Installed-Size: 511
Depends: libeclipse-ltk-core-refactoring-java, libeclipse-compare-java, libeclipse-core-commands-java, libeclipse-core-expressions-java, libeclipse-core-filebuffers-java, libeclipse-core-filesystem-java, libeclipse-core-jobs-java, libeclipse-core-resources-java, libeclipse-core-runtime-java, libeclipse-jface-java (>= 3.14), libeclipse-jface-text-java, libeclipse-team-core-java, libeclipse-team-ui-java, libeclipse-text-java, libeclipse-ui-navigator-java, libeclipse-ui-workbench-java, libequinox-common-java, libequinox-preferences-java, libequinox-registry-java, libicu4j-java, libswt-gtk-4-java
Section: java
Priority: optional
Homepage: https://www.eclipse.org/jdt/ui/
Description: Eclipse Refactoring UI
 Eclipse JDT UI implements the user interface for the Java IDE. It provides
 several workbench contributions for viewing and manipulating Java code:
  * Package Explorer View - shows the Java element tree as defined
    by a project's build class path
  * Type Hierarchy View - shows the sub- and supertype hierarchies
  * Java Outline View - shows the structure of a Java compilation unit
    or class file
  * Java Browsing Perspecitve - allows navigating the Java model using
    separate views for projects, packages, types and memebers.
  * Wizards for creating Java elements - Java project, package, class,
    interface
  * Java Editor - syntax coloring, content specific code assist, code
    resolve, method level edit, import assistance, quick fix and quick
    assist
 .
 In addition to these workbench elements the following functions are provided:
  * Refactoring support - Extract Method, Safe Rename and Moving with
    reference updates, Self Encapsulate Field etc.
  * Java searching - find declarations of and/or references to packages,
    types, methods, and fields, scoped to the workspace, a working set,
    or the current selection.
  * Java aware structured compare - determine and present changes to
    individual Java methods. It supports to replace individual Java elements
    with a version of an element from the local history.
 .
 This package contains the org.eclipse.ltk.ui.refactoring bundle.
