#!/bin/sh

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# $1 = version of the package being upgraded.
install() {
    if [ -f /etc/default/epoptes ]; then
        . /etc/default/epoptes || true
    fi
    SOCKET_GROUP=${SOCKET_GROUP:-epoptes}
    if ! getent group "$SOCKET_GROUP" >/dev/null; then
        addgroup --system "$SOCKET_GROUP"
    fi

    if ! [ -f /etc/epoptes/server.key ] || ! [ -f /etc/epoptes/server.crt ]
    then
        # openssl leaves an .rnd file causing a lintian warning (bug #750099).
        tmphome=$(mktemp -d)
        # Generate a certificate that is valid since the Epoch,
        # to work around wrong dates on clients with CMOS battery issues.
        # faketime fails on launchpad, so also try without it.
        HOME=$tmphome faketime '1970-01-01 00:00:00 UTC' \
            openssl req -batch -x509 -nodes \
            -newkey rsa:4096 -days $(($(date --utc +%s) / 86400 + 3652)) \
            -keyout /etc/epoptes/server.key -out /etc/epoptes/server.crt ||
        HOME=$tmphome openssl req -batch -x509 -nodes \
            -newkey rsa:4096 -days $(($(date --utc +%s) / 86400 + 3652)) \
            -keyout /etc/epoptes/server.key -out /etc/epoptes/server.crt
        rm -rf "$tmphome"
        chmod 600 /etc/epoptes/server.key
        echo '
A new OpenSSL certificate has been generated for epoptes.
Please ensure that you transfer /etc/epoptes/server.crt
to your clients by issuing `epoptes-client -c` from your
regular workstations or from your LTSP chroots.' >&2
    fi
}

case "$1" in
    configure)
        install "$2"
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.


# Automatically added by dh_python3:
if which py3compile >/dev/null 2>&1; then
	py3compile -p epoptes 
fi
if which pypy3compile >/dev/null 2>&1; then
	pypy3compile -p epoptes  || true
fi

# End automatically added section
# Automatically added by dh_installsystemd/11.4.1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'epoptes.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'epoptes.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'epoptes.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'epoptes.service' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installsystemd/11.4.1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -d /run/systemd/system ]; then
		systemctl --system daemon-reload >/dev/null || true
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		deb-systemd-invoke $_dh_action 'epoptes.service' >/dev/null || true
	fi
fi
# End automatically added section


exit 0
