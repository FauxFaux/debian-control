Package: golang-github-xordataexchange-crypt
Version: 0.0.2+git20170626.21.b2862e3-2
Architecture: amd64
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Installed-Size: 9470
Depends: libc6 (>= 2.3.2)
Suggests: golang-github-xordataexchange-crypt-dev
Built-Using: etcd (= 3.2.18+dfsg-1), golang-1.10 (= 1.10.5-1), golang-github-armon-consul-api (= 0.0~git20150107.0.dcfedd5-4), golang-github-coreos-semver (= 0.2.0-3), golang-github-ugorji-go-codec (= 1.1.1-1), golang-go.crypto (= 1:0.0~git20180614.a8fb68e-1), golang-golang-x-net-dev (= 1:0.0+git20180124.0ed95ab+dfsg-2)
Section: utils
Priority: optional
Homepage: https://github.com/xordataexchange/crypt
Description: Store/retrieve encrypted configs from etcd or Consul (CLI tool)
 Fess up.  You have passwords and usernames hard coded in your apps.
 You have IP addresses checked in to your source code repository.
 You have entire configuration files that were created by the developer
 who wrote the app and haven’t been changed since she typed "git init".
 .
 "crypt" is here to lead you back to the Path of Enlightened Configuration.
 Store encrypted configuration values in etcd or Consul using a command-line
 application.
 .
 Decrypt them before starting your application using a wrapper script and
 the handy CLI tool, or inside the app using the "crypt/config" library.
 .
 "crypt" is built on time-tested standards like OpenPGP, base64, and gzip.
 Your data is encrypted using public key encryption, and can only be
 decrypted by when the private key is available.  After compression,
 it is encrypted, and base64-encoded so it can be stored in your key/value
 store of choice.  etcd and Consul are supported out of the box, but adding
 other storage tools is a trivial task, thanks to Go’s interfaces.
 .
 This package provides the command-line tool "bin/crypt", but renamed to
 /usr/bin/crypt-xordataexchange, to avoid filename collision with
 /usr/bin/crypt from the mcrypt package.
