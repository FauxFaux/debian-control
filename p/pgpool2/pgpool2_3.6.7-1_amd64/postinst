#!/bin/sh
# postinst script for pgpool2
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

LASTVERSION=1.3-2

# Move a conffile without triggering a dpkg question
mv_conffile() {
    OLDCONFFILE="$1"
    NEWCONFFILE="$2"

    if [ -e "$OLDCONFFILE" ]; then
        echo "Preserving user changes to $NEWCONFFILE ..."
        mv -f "$NEWCONFFILE" "$NEWCONFFILE".dpkg-new
        mv -f "$OLDCONFFILE" "$NEWCONFFILE"
    fi
}


case "$1" in
    configure)
        if dpkg --compare-versions "$2" le "$LASTVERSION"; then
            mv_conffile "/etc/pgpool.conf" "/etc/pgpool2/pgpool.conf"
            mv_conffile "/etc/pcp.conf" "/etc/pgpool2/pcp.conf"
            mv_conffile "/etc/pool_hba.conf" "/etc/pgpool2/pool_hba.conf"
        fi
	# pgpool.conf is handled by ucf (but still move it in from the old location in the "if" above)
	if [ -f "/etc/pgpool2/pgpool.conf" ]; then
	    LPORT=`perl -lne 'if (/^port\s*=\s*(\d+)/) { print $1; exit; }' /etc/pgpool2/pgpool.conf`
	else
	    LPORT=`perl -e 'use lib "/usr/share/postgresql-common";use PgCommon;printf "%s\n", next_free_port;'`
	fi
	TMPCONFIG=`mktemp --tmpdir pgpool2.conf.XXXXXX`
	CONFIG=/etc/pgpool2/pgpool.conf
	sed -e "s/^port\s*=\s*[0-9]*/port = $LPORT/" /usr/share/pgpool2/pgpool.conf > $TMPCONFIG
	ucf $TMPCONFIG $CONFIG
	ucfr pgpool2 $CONFIG
	if test -e $CONFIG && ! su -c "test -r $CONFIG" postgres ; then # make file readable for postgres
		chgrp postgres $CONFIG
		chmod 640 $CONFIG
	fi
	rm -f $TMPCONFIG
	# Change permissions of pool_passwd, this file shoudn't be world readable.
	POOL_PASSWD=/etc/pgpool2/pool_passwd
	chgrp postgres $POOL_PASSWD
	chmod 640 $POOL_PASSWD
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

# Automatically added by dh_systemd_enable/10.10.8
# This will only remove masks created by d-s-h on package removal.
deb-systemd-helper unmask 'pgpool2.service' >/dev/null || true

# was-enabled defaults to true, so new installations run enable.
if deb-systemd-helper --quiet was-enabled 'pgpool2.service'; then
	# Enables the unit on first installation, creates new
	# symlinks on upgrades if the unit file has changed.
	deb-systemd-helper enable 'pgpool2.service' >/dev/null || true
else
	# Update the statefile to add new symlinks (if any), which need to be
	# cleaned up on purge. Also remove old symlinks.
	deb-systemd-helper update-state 'pgpool2.service' >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_installinit/10.10.8
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ]; then
	# In case this system is running systemd, we need to ensure that all
	# necessary tmpfiles (if any) are created before starting.
	if [ -d /run/systemd/system ] ; then
		systemd-tmpfiles --create /usr/lib/tmpfiles.d/pgpool2.conf >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installinit/10.10.8
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ]; then
	if [ -x "/etc/init.d/pgpool2" ]; then
		update-rc.d pgpool2 defaults >/dev/null
		invoke-rc.d pgpool2 start || exit $?
	fi
fi
# End automatically added section


exit 0


