Package: python-pycuda-dbg
Source: pycuda
Version: 2018.1.1-1
Architecture: amd64
Maintainer: Debian NVIDIA Maintainers <pkg-nvidia-devel@lists.alioth.debian.org>
Installed-Size: 21280
Depends: python-pycuda (= 2018.1.1-1), python-dbg (<< 2.8), libboost-python1.62.0, libboost-thread1.62.0, libc6 (>= 2.14), libcuda1 (>= 340), libcurand9.1, libgcc1 (>= 1:3.0), libstdc++6 (>= 5.2), python-numpy (>= 1:1.14.3), python-numpy-abi9, python-dbg (>= 2.7~), python-dbg:any (<< 2.8), python-dbg:any (>= 2.7~)
Section: contrib/debug
Priority: optional
Homepage: http://mathema.tician.de/software/pycuda
Description: Python module to access Nvidia‘s CUDA API (debug extensions)
 PyCUDA lets you access Nvidia‘s CUDA parallel computation API from Python.
 Several wrappers of the CUDA API already exist–so what’s so special about
 PyCUDA?
  * Object cleanup tied to lifetime of objects. This idiom, often called
    RAII in C++, makes it much easier to write correct, leak- and crash-free
    code.  PyCUDA knows about dependencies, too, so (for example) it won’t
    detach from a context before all memory allocated in it is also freed.
  * Convenience. Abstractions like pycuda.driver.SourceModule and
    pycuda.gpuarray.GPUArray make CUDA programming even more convenient than
    with Nvidia’s C-based runtime.
  * Completeness. PyCUDA puts the full power of CUDA’s driver API at your
    disposal, if you wish.
  * Automatic Error Checking. All CUDA errors are automatically translated
    into Python exceptions.
  * Speed. PyCUDA’s base layer is written in C++, so all the niceties
    above are virtually free.
  * Helpful Documentation.
 .
 This package contains debug extensions build for the Python debug interpreter.
Build-Ids: 2011e6c9c8f6d652f359c52b315976902d516e6b cdb8338249dc36d92c80a40e96ae9948097eb410
