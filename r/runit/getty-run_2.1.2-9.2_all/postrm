#!/bin/sh
set -e
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty6" \
	                 "/var/lib/runit/log/supervise/getty-tty6" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty5" \
	                 "/var/lib/runit/log/supervise/getty-tty5" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty4" \
	                 "/var/lib/runit/log/supervise/getty-tty4" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty3" \
	                 "/var/lib/runit/log/supervise/getty-tty3" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty2" \
	                 "/var/lib/runit/log/supervise/getty-tty2" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
# Automatically added by dh_runit
# -*- shell-script -*-

if [ "$1" = 'purge' ] ; then
	# If runscript was never invoked, there will be no files
	# in this directory, and `dpkg' will remove it. In this case,
	# we have nothing to do.
	for supervise in "/var/lib/runit/supervise/getty-tty1" \
	                 "/var/lib/runit/log/supervise/getty-tty1" ; do
		if [ -d "$supervise" ] ; then

			# Actually only `down' may be absent, but it does not
			# matter.

			for file in control lock ok pid stat status down ; do
				rm -f "$supervise/$file"
			done

			# It should be empty now. If it is not, it means that
			# system administrator put something there. It is very
			# stupid, but will of user is sacred, and directory is
			# left as-is in such case.
			#
			# NOTE: Non-POSIX option is used. The day coreutils will
			# no longer be essential, it will require a fix.
			rmdir --ignore-fail-on-non-empty "$supervise"
		fi
	done
fi

# Local Variables:
# eval: (sh-set-shell "sh" t nil)
# End:
# End automatically added section
