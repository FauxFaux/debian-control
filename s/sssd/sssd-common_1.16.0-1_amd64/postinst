#!/bin/sh
# postinst script for sssd
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

OUT=/dev/null
HOME=/var/lib/sss
LIBDIR=/usr/lib/x86_64-linux-gnu/sssd

case "$1" in
    configure)
        if ! getent passwd sssd > $OUT; then
            echo "Creating SSSD system user & group..."
            adduser --quiet --system --home $HOME \
                --disabled-password --group \
                --gecos "SSSD system user" \
                sssd > $OUT
        fi
        chown sssd:sssd \
            $HOME/db \
            $HOME/gpo_cache \
            $HOME/mc \
            $HOME/pipes \
            $HOME/pipes/private \
            $HOME/pubconf \
            /etc/sssd \
            /var/log/sssd
        chown root:sssd $LIBDIR/p11_child

        chmod 4754 $LIBDIR/p11_child
        chmod 755 $HOME/gpo_cache $HOME/mc $HOME/pipes $HOME/pubconf
        chmod 750 /var/log/sssd
        chmod 711 /etc/sssd
        chmod 700 $HOME/db $HOME/pipes/private
        if [ -f /etc/sssd/sssd.conf ]; then
            chown root:root /etc/sssd/sssd.conf
            chmod 0600 /etc/sssd/sssd.conf
        fi

        if dpkg --compare-versions "$2" lt-nl "1.15.0-3"; then
            if [ -x "/usr/bin/deb-systemd-helper" ]; then
                deb-systemd-helper purge sssd-autofs.service >/dev/null
                deb-systemd-helper unmask sssd-autofs.service >/dev/null
                deb-systemd-helper purge sssd-autofs.socket >/dev/null
                deb-systemd-helper unmask sssd-autofs.socket >/dev/null
                deb-systemd-helper purge sssd-nss.service >/dev/null
                deb-systemd-helper unmask sssd-nss.service >/dev/null
                deb-systemd-helper purge sssd-nss.socket >/dev/null
                deb-systemd-helper unmask sssd-nss.socket >/dev/null
                deb-systemd-helper purge sssd-pam.service >/dev/null
                deb-systemd-helper unmask sssd-pam.service >/dev/null
                deb-systemd-helper purge sssd-pam.socket >/dev/null
                deb-systemd-helper unmask sssd-pam.socket >/dev/null
                deb-systemd-helper purge sssd-pam-priv.socket >/dev/null
                deb-systemd-helper unmask sssd-pam-priv.socket >/dev/null
                deb-systemd-helper purge sssd-sudo.service >/dev/null
                deb-systemd-helper unmask sssd-sudo.service >/dev/null
                deb-systemd-helper purge sssd-sudo.socket >/dev/null
                deb-systemd-helper unmask sssd-sudo.socket >/dev/null
                deb-systemd-helper purge sssd-ssh.service >/dev/null
                deb-systemd-helper unmask sssd-ssh.service >/dev/null
                deb-systemd-helper purge sssd-ssh.socket >/dev/null
                deb-systemd-helper unmask sssd-ssh.socket >/dev/null
            fi
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

invoke_failure() {
    # invoke-rc.d failed, likely because of a missing sssd.conf
    if [ ! -s /etc/sssd/sssd.conf ]; then
        echo "... because /etc/sssd/sssd.conf is not available yet"
    fi
}

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

# Automatically added by dh_systemd_enable/11
# This will only remove masks created by d-s-h on package removal.
deb-systemd-helper unmask 'sssd-secrets.service' >/dev/null || true

# was-enabled defaults to true, so new installations run enable.
if deb-systemd-helper --quiet was-enabled 'sssd-secrets.service'; then
	# Enables the unit on first installation, creates new
	# symlinks on upgrades if the unit file has changed.
	deb-systemd-helper enable 'sssd-secrets.service' >/dev/null || true
else
	# Update the statefile to add new symlinks (if any), which need to be
	# cleaned up on purge. Also remove old symlinks.
	deb-systemd-helper update-state 'sssd-secrets.service' >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_systemd_enable/11
# This will only remove masks created by d-s-h on package removal.
deb-systemd-helper unmask 'sssd-secrets.socket' >/dev/null || true

# was-enabled defaults to true, so new installations run enable.
if deb-systemd-helper --quiet was-enabled 'sssd-secrets.socket'; then
	# Enables the unit on first installation, creates new
	# symlinks on upgrades if the unit file has changed.
	deb-systemd-helper enable 'sssd-secrets.socket' >/dev/null || true
else
	# Update the statefile to add new symlinks (if any), which need to be
	# cleaned up on purge. Also remove old symlinks.
	deb-systemd-helper update-state 'sssd-secrets.socket' >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_systemd_enable/11
# This will only remove masks created by d-s-h on package removal.
deb-systemd-helper unmask 'sssd.service' >/dev/null || true

# was-enabled defaults to true, so new installations run enable.
if deb-systemd-helper --quiet was-enabled 'sssd.service'; then
	# Enables the unit on first installation, creates new
	# symlinks on upgrades if the unit file has changed.
	deb-systemd-helper enable 'sssd.service' >/dev/null || true
else
	# Update the statefile to add new symlinks (if any), which need to be
	# cleaned up on purge. Also remove old symlinks.
	deb-systemd-helper update-state 'sssd.service' >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_apparmor/2.11.1-4
aa_is_enabled() {
   if command aa-enabled >/dev/null 2>&1; then
      # apparmor >= 2.10.95-2
      aa-enabled --quiet 2>/dev/null
   else
      # apparmor << 2.10.95-2
      # (This should be removed once Debian Stretch and Ubuntu 18.04 are out.)
      rc=0
      aa-status --enabled 2>/dev/null || rc=$?
      [ "$rc" = 0 ] || [ "$rc" = 2 ]
   fi
}

if [ "$1" = "configure" ]; then
    APP_PROFILE="/etc/apparmor.d/usr.sbin.sssd"
    if [ -f "$APP_PROFILE" ]; then
        # Add the local/ include
        LOCAL_APP_PROFILE="/etc/apparmor.d/local/usr.sbin.sssd"

        test -e "$LOCAL_APP_PROFILE" || {
            tmp=`mktemp`
        cat <<EOM > "$tmp"
# Site-specific additions and overrides for usr.sbin.sssd.
# For more details, please see /etc/apparmor.d/local/README.
EOM
            mkdir `dirname "$LOCAL_APP_PROFILE"` 2>/dev/null || true
            mv -f "$tmp" "$LOCAL_APP_PROFILE"
            chmod 644 "$LOCAL_APP_PROFILE"
        }

        # Reload the profile, including any abstraction updates
        if aa_is_enabled; then
            apparmor_parser -r -T -W "$APP_PROFILE" || true
        fi
    fi
fi
# End automatically added section
# Automatically added by dh_installinit/11
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ]; then
	if [ -x "/etc/init.d/sssd" ]; then
		update-rc.d sssd defaults >/dev/null
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		invoke-rc.d sssd $_dh_action || invoke_failure
	fi
fi
# End automatically added section
# Automatically added by dh_systemd_start/11
if [ -d /run/systemd/system ]; then
	systemctl --system daemon-reload >/dev/null || true
	if [ -n "$2" ]; then
		_dh_action=restart
	else
		_dh_action=start
	fi
	deb-systemd-invoke $_dh_action 'sssd-secrets.service' 'sssd-secrets.socket' >/dev/null || true
fi
# End automatically added section


exit 0
