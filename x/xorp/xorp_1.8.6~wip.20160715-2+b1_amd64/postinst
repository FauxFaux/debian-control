#!/bin/sh

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


DEFAULT=/etc/default/xorp

echo xorp.postinst $*

case "$1" in
    configure|install|upgrade)

	[ -r "$DEFAULT" ] && . $DEFAULT
	# Sane defaults, just in case
	[ -z "$XORPUSER" ] && XORPUSER=xorp
	[ -z "$XORPGROUP" ] && XORPGROUP=xorp
	[ -z "$LOGDIR" ] && LOGDIR=/var/log/xorp

	# create xorp user
	# 1. create group if not existing
	if ! getent group | grep -q "^$XORPGROUP:" ; then
		addgroup --quiet --system $XORPGROUP 2>/dev/null || true
	fi
	# 2. create homedir if not existing
	test -d $LOGDIR || mkdir $LOGDIR
	# 3. create user if not existing
	if ! getent passwd | grep -q "^$XORPUSER:"; then
	adduser --quiet \
	        --system \
		--ingroup $XORPGROUP \
		--no-create-home \
		--home $LOGDIR \
		--disabled-password \
		$XORPUSER 2>/dev/null || true
	fi
	# 4. adjust passwd entry
	usermod -c "Xorp admin" \
		-d $LOGDIR \
		-g $XORPGROUP \
		$XORPUSER
	# 5. create configdir if not existing
	test -d /etc/xorp || mkdir /etc/xorp
	# 6. adjust file and directory permissions
	if ! dpkg-statoverride --list /etc/xorp >/dev/null
        then
		chown -R $XORPUSER:$XORPGROUP /etc/xorp
		chmod u=rwx,g=rwxs,o= /etc/xorp
	fi
	if ! dpkg-statoverride --list $LOGDIR >/dev/null
	then
		chown -R $XORPUSER:adm $LOGDIR
		chmod u=rwx,g=rxs,o= $LOGDIR
	fi
		
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;
    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 0
    ;;
esac

# Automatically added by dh_systemd_enable
# This will only remove masks created by d-s-h on package removal.
deb-systemd-helper unmask xorp.service >/dev/null || true

# was-enabled defaults to true, so new installations run enable.
if deb-systemd-helper --quiet was-enabled xorp.service; then
	# Enables the unit on first installation, creates new
	# symlinks on upgrades if the unit file has changed.
	deb-systemd-helper enable xorp.service >/dev/null || true
else
	# Update the statefile to add new symlinks (if any), which need to be
	# cleaned up on purge. Also remove old symlinks.
	deb-systemd-helper update-state xorp.service >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_installinit
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ]; then
	if [ -x "/etc/init.d/xorp" ]; then
		update-rc.d xorp defaults >/dev/null
		invoke-rc.d xorp start || exit $?
	fi
fi
# End automatically added section


exit 0
